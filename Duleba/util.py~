from numpy.linalg import norm
from numpy.linalg import pinv
from numpy import cos, sin, array

l1 = 1.0
l2 = 1.0

def fk(q):
  
  x = l1 * cos(q[0]) + l2 * cos(q[0] + q[1])
  y = l1 * sin(q[0]) + l2 * sin(q[0] + q[1])
  return array([x[0], y[0]]).reshape(2, 1)
  
def J(q):
  from numpy import cos, sin, array
  j11 = -l1 * sin(q[0]) - l2 * sin(q[0] + q[1])
  j12 = -l2 * sin(q[0] + q[1])
  j21 =  l2 * cos(q[0] + q[1])
  j22 =  l1 * cos(q[0]) + l2 * cos(q[0] + q[1])
  return array([j11[0], j12[0], j21[0], j22[0]]).reshape(2, 2)
  
def rrplot(q):
  from numpy import cos, sin
  x1 = l1 * cos(q[0])
  y1 = l1 * sin(q[0])
  x2 = l1 * cos(q[0]) + l2 * cos(q[0] + q[1])
  y2 = l1 * sin(q[0]) + l2 * sin(q[0] + q[1])
  x = [ 0.0, x1[0], x2[0] ]
  y = [ 0.0, y1[0], y2[0] ]
  
  plt.figure()
  plt.axis([-3, 3, -3, 3])
  plt.plot(x, y, 'ko-')
  plt.xlabel('x')
  plt.ylabel('y')
  plt.show()
  
  

def newton(x, q0, alpha = 0.1, max_it = 1000, tol = 1e-6):
  it_counter = max_it
  
  qk = q0
  xk = fk(q0)
  Jk = J(q0)
  
  while(it_counter > 0):
    it_counter -= 1
    
    Jk_inv = pinv(Jk)
    q_new = qk + alpha * Jk_inv.dot(x - xk)
    
    if norm(q_new - qk) <= tol:
      return {'conv': True, 'q': q_new}
    
    qk = q_new
    xk = fk(qk)
    Jk = J(qk)
    
  return {'conv': False}
